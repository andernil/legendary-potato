/*
 * This is a demo Linux kernel module.
 */

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>

#include <linux/ioport.h>
#include <linux/module.h>
#include <linux/types.h>
#include <linux/cdev.h>
#include <linux/fs.h>
#include <linux/slab.h>
#include <linux/io.h>
#include <linux/device.h>
#include <asm/uaccess.h>
#include <linux/interrupt.h>
#include <asm/siginfo.h>
#include <linux/signal.h>
//#include <game.h>
#include "efm32gg.h"


#define DRIVER_NAME "timer-module"
/*
 * template_init - function to insert this module into kernel space
 *
 * This is the first of two exported functions to handle inserting this
 * code into a running kernel
 *
 * Returns 0 if successfull, otherwise -1
 */

static dev_t my_dev;
struct cdev my_cdev;
struct class *my_class;

static int delay_time = 200;


static int driver_fasync(int, struct file*, int);
//static ssize_t driver_read(struct file*, char* __user, size_t, loff_t*);
static ssize_t driver_write(struct file*, char* __user, size_t, loff_t*);
static int driver_open(struct inode*, struct file*);
static int driver_release(struct inode*, struct file*);
struct fasync_struct* async_queue;


struct file_operations my_fops = {
.owner = THIS_MODULE,
//.read = driver_read,
.open = driver_open,
.write = driver_write,
.release = driver_release,
.fasync = driver_fasync,
};

static int driver_fasync(int fd, struct file* filp, int mode) {
    return fasync_helper(fd, filp, mode, &async_queue);
}

static int driver_open(struct inode* inode, struct file* filp) {
    printk(KERN_INFO "Open driver\n");
    return 0;
}

static ssize_t driver_write(struct file* filp, char* __user buff,
        size_t count, loff_t* offp)
{
    //delaytime = buff;
    printk(KERN_INFO "Writing to buttons doesn't make sense.");
    return 1;
}

static int driver_release(struct inode* inode, struct file* filp) {
    printk(KERN_INFO "Release driver\n");
    return 0;
}

static struct timer_list my_timer;
 
void my_timer_callback( unsigned long data )
{
  mod_timer(&my_timer, jiffies + msecs_to_jiffies(delay_time));
//  printk( "my_timer_callback called (%ld).\n", jiffies );
  if(async_queue){
	kill_fasync(&async_queue, SIGPOLL, POLL_IN);
  }  
}

static int __init timer_init(void)
{
  int ret;

    if(0>alloc_chrdev_region(&my_dev, 0, 1, DRIVER_NAME)){
	printk("Error making major and minor numbers\n");
    };

    if(0>cdev_add(&my_cdev, my_dev, 1)){
	printk("Error adding device to kernel\n");
    }

    cdev_init(&my_cdev, &my_fops);
    my_class = class_create(THIS_MODULE, DRIVER_NAME);

    if(device_create(my_class, NULL, my_dev, NULL, DRIVER_NAME) == NULL ){
        printk(KERN_ALERT "Error creating device\n");
        return -1;
    }
 
  printk("Timer hello world\n");
 
  // my_timer.function, my_timer.data
  setup_timer( &my_timer, my_timer_callback, delay_time );
 
  printk( "Starting timer to fire in 200ms (%ld)\n", jiffies );
  ret = mod_timer( &my_timer, jiffies + msecs_to_jiffies(200) );
  if (ret) printk("Error in mod_timer\n");
  return 0;
}

/*
 * template_cleanup - function to cleanup this module from kernel space
 *
 * This is the second of two exported functions to handle cleanup this
 * code from a running kernel
 */

static void __exit timer_cleanup(void)
{
  int ret;
 
  ret = del_timer( &my_timer );
  if (ret) printk("The timer is still in use...\n");
 
  printk("Timer module uninstalling, goodbye\n");

  cdev_del(&my_cdev);
  device_destroy(my_class, my_dev);
  class_destroy(my_class);

 
  return;
}

module_init(timer_init);
module_exit(timer_cleanup);

MODULE_DESCRIPTION("Small module, demo only, not very useful.");
MODULE_LICENSE("GPL");

